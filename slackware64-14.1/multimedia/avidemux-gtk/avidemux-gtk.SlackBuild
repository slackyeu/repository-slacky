#!/bin/sh

# Heavily based on the Slackware 14.1 SlackBuild

# Written by Loris Vincenzi ( http://www.slacky.eu ) 
# Last build from 6c33c (seic33c AT gmail DOT com)

# Slackware build script for avidemux-gtk
# Official Site: http://fixounet.free.fr/avidemux/
# Patches from ...

# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Requirements:aften, faac, faad2, lame, opencore-amr, x264, xvidcore
# Requirements:jack-audio-connection-kit, libdca, libva, libvpx, twolame

set -e


# Basic information.

PKGNAME=avidemux
VERSION=${VERSION:-2.5.6}
#VERSION=$(date +%Y%m%d)			#In case of git/svn/cvs
ARCH=${ARCH:-$(uname -m)}
BUILD=${BUILD:-2}
TAG=${TAG:-sl}
SOURCE="http://downloads.sourceforge.net/avidemux/${PKGNAME}_$VERSION.tar.gz"
TAR=      # empty = auto
DIR=      # empty = auto
#TAR=$PKGNAME-$VERSION.tar.bz2		#In case of git/svn/cvs
#DIR=$PKGNAME						#In case of git/svn/cvs
DOCS="AUTHORS COPYING README TODO"
SLKFILES=""

# Automatically determine the architecture we're building on:
case "$ARCH" in
	  i?86) export ARCH=i486; SLKCFLAGS="-O2 -march=i486 -mtune=i686"; CHOST="i486-slackware-linux" ;;
	x86_64) SLKCFLAGS="-O2 -fPIC"; LIBDIRSUFFIX="64"; CHOST="x86_64-slackware-linux" ;;
	  arm*) export ARCH=arm; SLKCFLAGS="-O2 -march=armv5te"; CHOST="arm-slackware-linux-gnueabi" ;;
# Unless $ARCH is already set, use uname -m for all other archs:
		 *) export ARCH=$( uname -m ) ;;
esac

# If EULA
if [ -e EULA.TXT ];then
	more EULA.TXT
	echo "Do you accept terms? (yes/[no])"
	read ACCEPT
	if [ "$ACCEPT" != "yes" ];then
		echo; echo "SlackBuild Aborted!!"
		exit 1
	fi
fi

# Do not touch following if not needed
JOBS=${JOBS:--j2}
CWD=$(pwd)
TMP=${TMP:-/tmp/buildpkgs/$PKGNAME}
PKG=$TMP/package-$PKGNAME
OUTPUT=${OUTPUT:-$CWD}
TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|.tgz|)$//')}

if [ ! -e $CWD/$TAR ];then

# Download sources from git/mercurial/svn/etcetera into a directory named $DIR

#	git clone $SOURCE $DIR
#	tar czf $TAR $DIR
#	rm -rf $DIR

	wget $SOURCE -O "$CWD/$TAR"
fi

### Preparing Source
rm -rf $TMP
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
tar xvf $CWD/$TAR
cd $DIR

chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Customize as you need
echo $(pwd)

echo "Building core ..."
if [ "$ARCH" = "x86_64" ]; then
  # Some paths are incorrectly hardcoded to "lib":
sed -i -e "s/Dir=\"lib\"/Dir=\"lib${LIBDIRSUFFIX}\"/" $(grep -lr 'Dir="lib"' .)
    fi


mkdir build
cd build

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
cmake . \
  -DCMAKE_INSTALL_PREFIX:STRING="/usr" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_VERBOSE_MAKEFILE:BOOL="TRUE" \
  -DLIB_SUFFIX:STRING="$LIBDIRSUFFIX" \
  ..

make
make DESTDIR=$PKG install/strip
cd ..

echo "Building plugins ..."

mkdir -p build_plugins
cd build_plugins

cmake \
  -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
  -DCMAKE_INSTALL_PREFIX=/usr \
  -DMAN_INSTALL_DIR=/usr/man \
  -DSYSCONF_INSTALL_DIR=/etc \
  -DLIB_SUFFIX=${LIBDIRSUFFIX} \
  -DAVIDEMUX_SOURCE_DIR=$(cd .. ; pwd) \
  -DAVIDEMUX_CORECONFIG_DIR=$(cd .. ; pwd)/build/config \
  -DAVIDEMUX_INSTALL_PREFIX=$(cd .. ; pwd)/build \
  ../plugins

make
make DESTDIR=$PKG install/strip
cd -

## Do special operations

mkdir -p $PKG/usr/man/man1
cat man/avidemux.1 | gzip -9c > $PKG/usr/man/man1/avidemux.1.gz

# Removing Qt4 and GTK2+ parts
rm -r $PKG/usr/share/avidemux
rm    $PKG/usr/bin/avidemux2_cli
rm    $PKG/usr/bin/avidemux2_qt4

( cd $PKG
  find -iname '*Cli*' -exec rm -vf {} \;
  find -iname '*qt4*' -exec rm -vf {} \;
  find -iname '*cli*' -exec rm -vf {} \;
  find -iname '*QT4*' -exec rm -vf {} \;
  find -iname '*Qt*' -exec rm -vf {} \;
)

cd $TMP/$DIR
mkdir -p $PKG/usr/share/{applications,pixmaps}
mkdir -p $PKG/usr/share/icons/hicolor/{16x16,32x32,48x48,64x64}/apps
# If the qt4 binary was built, we prefer to use that over the gtk version:
if [ -x $PKG/usr/bin/avidemux2_qt4 ]; then
  cat avidemux2.desktop | sed -e 's/_gtk/_qt4/' \
  > $PKG/usr/share/applications/avidemux2.desktop
else
  install -m644 avidemux2.desktop $PKG/usr/share/applications/avidemux2.desktop
fi
install -m644 avidemux_icon.png $PKG/usr/share/pixmaps/avidemux.png 
install -m644 avidemux_icon.png \
  ${PKG}/usr/share/icons/hicolor/64x64/apps/avidemux.png
convert avidemux_icon.png -resize 16x16 \
  ${PKG}/usr/share/icons/hicolor/16x16/apps/avidemux.png
convert avidemux_icon.png -resize 32x32 \
  ${PKG}/usr/share/icons/hicolor/32x32/apps/avidemux.png
convert avidemux_icon.png -resize 48x48 \
  ${PKG}/usr/share/icons/hicolor/48x48/apps/avidemux.png

PKGNAME=$PKGNAME-gtk
# Documentation
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION

for DC in $DOCS;do
	[ -e $DC ] && cp -r $DC $PKG/usr/doc/$PKGNAME-$VERSION/ || true
done

mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
	
cd $CWD
for SB in $PKGNAME.SlackBuild slack-desc doinst.sh doinst.sh.gz EULA.TXT $SLKFILES;do
	[ -e "$SB" ] && cp -r $SB $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$SB || true
done

for i in man info
do
    if [ -d $PKG/usr/$i ]; then
   		cd $PKG/usr/$i
		find . -type f -exec gzip -9 {} \;
		for file in $( find . -type l ) ; do ln -s $( readlink $file ).gz $file.gz ; rm $file ; done
		[ "$i" == "info" ] && rm -f dir
    fi
done
	
cd $PKG
find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh
[ -e $CWD/doinst.sh.gz ] && zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh

cd $PKG
chown -R root:root $PKG

if [ -x "$(which requiredbuilder 2>/dev/null)" ];then
        EXCLUDE="gcc, gcc-g++" \
	requiredbuilder -y -v -s $CWD $PKG # add "-c -b" if you have binary files in /usr/share
	[ -e install/slack-required ] && cat install/slack-required > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-required
fi

/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}

if [ "$1" = "--cleanup" ]; then
	rm -rf $TMP
fi
