#!/bin/sh
 
# Heavily based on the Slackware 14.1 SlackBuild
# Written by miklos < ardutu at gmail dot com >
# 
# Slackware build script for nginx
# Official Site: http://nginx.org
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Require: geoip

set -e

# Basic information.
PKGNAME=nginx
VERSION=${VERSION:-1.8.0}
BUILD=${BUILD:-1}
ARCH=${ARCH:-$(uname -m)}
TAG=${TAG:-sl}
SOURCE="http://nginx.org/download/${PKGNAME}-${VERSION}.tar.gz"
TAR=      # empty = auto
DIR=      # empty = auto
DOCS="CHANGES* LICENSE README"
SLKFILES="config.patch rc.nginx nginx.logrotate" # all files needed to the slackbuild (except slack-desc etc..)

# Automatically determine the architecture we're building on:
case "$ARCH" in
	  i?86) export ARCH=i486; SLKCFLAGS="-O2 -march=i486 -mtune=i686"; CHOST="i486-slackware-linux" ;;
	x86_64) SLKCFLAGS="-O2 -fPIC"; LIBDIRSUFFIX="64"; CHOST="x86_64-slackware-linux" ;;
	  arm*) export ARCH=arm; SLKCFLAGS="-O2 -march=armv5te"; CHOST="arm-slackware-linux-gnueabi" ;;
# Unless $ARCH is already set, use uname -m for all other archs:
		 *) export ARCH=$( uname -m ) ;;
esac

# Does not touch following if not needed
JOBS=${JOBS:--j2}
CWD=$(pwd)
TMP=${TMP:-/tmp/buildpkgs/$PKGNAME}
PKG=$TMP/package-$PKGNAME
OUTPUT=${OUTPUT:-$CWD}
TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|)$//')}
 
if [ ! -e "$CWD/$TAR" ];then
  wget "$SOURCE" -O "$CWD/$TAR"
fi

### Preparing Source
rm -rf $TMP
mkdir -p $TMP $PKG $OUTPUT $PKG/etc/nginx/conf.d/
cd $TMP
tar xvf $CWD/$TAR
cd $DIR
 
#add config directory conf.d/
patch -p0 < $CWD/config.patch
 
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Customize as you need
CFLAGS="$CFLAGS $SLKCFLAGS" \
CXXFLAGS="$CXXFLAGS $SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --sbin-path=/usr/sbin/nginx \
  --conf-path=/etc/nginx/nginx.conf \
  --pid-path=/var/run/nginx.pid \
  --lock-path=/var/lock/nginx \
  --user=${NGINXUSER:=nobody} \
  --group=${NGINXGROUP:=nogroup} \
  --error-log-path=/var/log/nginx/error.log \
  --http-log-path=/var/log/nginx/access.log \
  --with-rtsig_module \
  --with-select_module \
  --with-poll_module \
  --with-http_ssl_module \
  --with-http_realip_module \
  --with-http_addition_module \
  --with-http_xslt_module \
  --with-http_sub_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_gzip_static_module \
  --with-http_random_index_module \
  --with-http_secure_link_module \
  --with-http_stub_status_module \
  --http-client-body-temp-path=/var/tmp/nginx_client_body_temp \
  --http-proxy-temp-path=/var/tmp/nginx_proxy_temp \
  --http-fastcgi-temp-path=/dev/shm \
  --with-http_geoip_module \
  --with-http_realip_module \
  --with-http_perl_module \
  --with-http_image_filter_module \
  --with-ipv6 \
  --with-imap \
  --with-mail \
  --with-mail_ssl_module \
  --with-imap_ssl_module \
  --with-http_gunzip_module \
  --http-scgi-temp-path=/var/tmp/nginx_scgi_temp \
  --http-uwsgi-temp-path=/var/tmp/nginx_uwsgi_temp \
  --with-http_spdy_module \
  --with-http_stub_status_module \
  --with-file-aio

make $JOBS 
make install DESTDIR=$PKG

# Remove some other empty and/or unnecessary directories from the package
eval $(perl '-V:archlib')
rm -rf $PKG/$archlib $PKG/usr/html $PKG/var $PKG/usr/lib64

# Add an init script
mkdir -p $PKG/etc/rc.d
cat $CWD/rc.nginx > $PKG/etc/rc.d/rc.nginx.new

mkdir -p $PKG/etc/logrotate.d
cat $CWD/nginx.logrotate > $PKG/etc/logrotate.d/nginx.new

mkdir -p $PKG/usr/man/man8
cp man/nginx.8 $PKG/usr/man/man8/

# Don't clobber config files
for file in fastcgi_params fastcgi.conf mime.types nginx.conf \
            koi-utf koi-win scgi_params uwsgi_params win-utf ; do
            mv $PKG/etc/nginx/$file $PKG/etc/nginx/$file.new ;
done

# Documentations
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION
for DC in $DOCS;do
  [ -e $DC ]&&cp -r $DC $PKG/usr/doc/$PKGNAME-$VERSION/
done
 
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cd $CWD
for SB in $PKGNAME.SlackBuild slack-desc doinst.sh doinst.sh.gz EULA.TXT $SLKFILES;do
  [ -e $SB ]&&cp -r $SB $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$SB
done

for i in man info
do
    if [ -d $PKG/usr/$i ]; then
   		cd $PKG/usr/$i
		find . -type f -exec gzip -9 {} \;
		for file in $( find . -type l ) ; do ln -s $( readlink $file ).gz $file.gz ; rm $file ; done
		[ "$i" == "info" ] && rm -f dir
    fi
done

# Strip binary files
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)


# Preparing to packaging
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh
[ -e $CWD/doinst.sh.gz ] && zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh

cd $PKG
chown -R root:root $PKG
 
if [ -x "$(which requiredbuilder 2>/dev/null)" ];then
  requiredbuilder -y -v -s $CWD $PKG   # add "-c -b" if you have binary files in /usr/share 
  [ -e install/slack-required ]&&cat install/slack-required > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-required
fi

# Create the log dir and set the permissions
mkdir -p $PKG/var/log/nginx
chown $NGINXUSER:$NGINXGROUP $PKG/var/log/nginx
chmod 750 $PKG/var/log/nginx

# Packaging
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}
 
if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP
fi







